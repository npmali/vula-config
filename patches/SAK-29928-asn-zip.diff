Index: assignment/assignment-tool/tool/src/java/org/sakaiproject/assignment/tool/AssignmentAction.java
===================================================================
--- assignment/assignment-tool/tool/src/java/org/sakaiproject/assignment/tool/AssignmentAction.java	(revision 46211)
+++ assignment/assignment-tool/tool/src/java/org/sakaiproject/assignment/tool/AssignmentAction.java	(working copy)
@@ -32,6 +32,8 @@
 import java.io.OutputStream;
 import java.nio.ByteBuffer;
 import java.nio.channels.FileChannel;
+import java.nio.charset.StandardCharsets;
+import java.nio.file.*;
 import java.text.Collator;
 import java.text.DateFormat;
 import java.text.DecimalFormat;
@@ -57,6 +59,7 @@
 import java.util.concurrent.ConcurrentSkipListSet;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
+import java.util.zip.*;
 
 import org.apache.commons.collections.CollectionUtils;
 import org.apache.commons.lang.StringUtils;
@@ -66,8 +69,6 @@
 import org.apache.poi.hssf.usermodel.HSSFSheet;
 import org.apache.poi.hssf.usermodel.HSSFWorkbook;
 import org.apache.poi.poifs.filesystem.POIFSFileSystem;
-import org.apache.tools.zip.ZipEntry;
-import org.apache.tools.zip.ZipFile;
 import org.sakaiproject.announcement.api.AnnouncementChannel;
 import org.sakaiproject.announcement.api.AnnouncementMessage;
 import org.sakaiproject.announcement.api.AnnouncementMessageEdit;
@@ -15853,13 +15854,11 @@
 		{
 			tempFile = File.createTempFile(String.valueOf(System.currentTimeMillis()),"");
 			
-			tmpFileOut = new FileOutputStream(tempFile);
-			writeToStream(fileContentStream, tmpFileOut);
-			tmpFileOut.flush();
-			tmpFileOut.close();
+			final Path destination = Paths.get(tempFile.getCanonicalPath());
+			Files.copy(fileContentStream, destination, StandardCopyOption.REPLACE_EXISTING);
 
-			ZipFile zipFile = new ZipFile(tempFile, "UTF-8");
-			Enumeration<ZipEntry> zipEntries = zipFile.getEntries();
+			ZipFile zipFile = new ZipFile(tempFile, StandardCharsets.UTF_8);
+			Enumeration<? extends ZipEntry> zipEntries = zipFile.entries();
 			ZipEntry entry;
 			while (zipEntries.hasMoreElements() && validZipFormat)
 			{
@@ -17302,29 +17301,6 @@
 	}
 
 
-	/**
-	 * Simply take as much as possible out of 'in', and write it to 'out'. Don't
-	 * close the streams, just transfer the data.
-	 * 
-	 * @param in
-	 * 		The data provider
-	 * @param out
-	 * 		The data output
-	 * @throws IOException
-	 * 		Thrown if there is an IOException transfering the data
-	 */
-	private void writeToStream(InputStream in, OutputStream out) throws IOException {
-		byte[] buffer = new byte[INPUT_BUFFER_SIZE];
-		
-		try {
-			while (in.read(buffer) > 0) {
-				out.write(buffer);
-			}
-		} catch (IOException e) {
-			throw e;
-		}
-	}
-    
     /**
      * Categories are represented as Integers. Right now this feature only will
      * be active for new assignments, so we'll just always return 0 for the 
