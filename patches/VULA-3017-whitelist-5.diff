From fab120a22fe522debdce996ed83a25992d594564 Mon Sep 17 00:00:00 2001
From: root <stephen.marquard@uct.ac.za>
Date: Fri, 21 Jul 2017 13:29:16 +0200
Subject: [PATCH] SAK-32699 Fix tests for SakaiLogin CXF webservice

---
 .../java/org/sakaiproject/util/IdPwEvidence.java   | 22 ++++++++++++++++++++++
 .../webservices/MockingAbstractWebService.java     |  2 ++
 .../webservices/SakaiLoginLoginTest.java           | 20 +++++++-------------
 3 files changed, 31 insertions(+), 13 deletions(-)

diff --git a/kernel/kernel-util/src/main/java/org/sakaiproject/util/IdPwEvidence.java b/kernel/kernel-util/src/main/java/org/sakaiproject/util/IdPwEvidence.java
index 175517c43d7..524500fe244 100644
--- a/kernel/kernel-util/src/main/java/org/sakaiproject/util/IdPwEvidence.java
+++ b/kernel/kernel-util/src/main/java/org/sakaiproject/util/IdPwEvidence.java
@@ -75,5 +75,27 @@ public String getRemoteAddr()
 	{
 		return m_remoteAddr;
 	}
+
+	@Override
+	public boolean equals(Object o) {
+
+		if (o == this) return true;
+
+		if (!(o instanceof IdPwEvidence)) return false;
+
+		IdPwEvidence e = (IdPwEvidence) o;
+
+		return e.getIdentifier().equals(m_identifier) &&
+		       e.getPassword().equals(m_password) &&
+		       e.getRemoteAddr().equals(m_remoteAddr);
+    	}
+
+	@Override
+	public int hashCode() {
+		int result = m_identifier.hashCode();
+		result = 31 * result + m_password.hashCode();
+		result = 31 * result + m_remoteAddr.hashCode();
+		return result;
+	}
 }
 
diff --git a/webservices/cxf/src/test/java/org/sakaiproject/webservices/MockingAbstractWebService.java b/webservices/cxf/src/test/java/org/sakaiproject/webservices/MockingAbstractWebService.java
index 3e94db2a469..9df51875c6e 100644
--- a/webservices/cxf/src/test/java/org/sakaiproject/webservices/MockingAbstractWebService.java
+++ b/webservices/cxf/src/test/java/org/sakaiproject/webservices/MockingAbstractWebService.java
@@ -43,6 +43,7 @@
 import org.sakaiproject.tool.api.SessionManager;
 import org.sakaiproject.tool.api.ToolManager;
 import org.sakaiproject.tool.assessment.samlite.api.SamLiteService;
+import org.sakaiproject.user.api.AuthenticationManager;
 import org.sakaiproject.user.api.UserDirectoryService;
 import org.sakaiproject.user.api.PreferencesService;
 import org.sakaiproject.tool.assessment.shared.impl.questionpool.QuestionPoolServiceImpl;
@@ -55,6 +56,7 @@
 			instance = service.newInstance();
 			instance.setAreaManager(mock(AreaManager.class));
 			instance.setSessionManager(mock(SessionManager.class));
+			instance.setAuthenticationManager(mock(AuthenticationManager.class));
 			instance.setAssignmentService(mock(AssignmentService.class));
 			instance.setAuthzGroupService(mock(AuthzGroupService.class));
 			instance.setCalendarService(mock(CalendarService.class));
diff --git a/webservices/cxf/src/test/java/org/sakaiproject/webservices/SakaiLoginLoginTest.java b/webservices/cxf/src/test/java/org/sakaiproject/webservices/SakaiLoginLoginTest.java
index f8b5fd70465..c9554e9d5a4 100644
--- a/webservices/cxf/src/test/java/org/sakaiproject/webservices/SakaiLoginLoginTest.java
+++ b/webservices/cxf/src/test/java/org/sakaiproject/webservices/SakaiLoginLoginTest.java
@@ -17,9 +17,9 @@
 
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
+import static org.mockito.Mockito.eq;
 
 import org.apache.cxf.jaxrs.client.WebClient;
-import org.junit.Ignore;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.ExpectedException;
@@ -53,30 +53,25 @@ private void addClientMocks(WebClient client) {
 	@Override
 	protected void addServiceMocks(AbstractWebService service) {
 		when(service.serverConfigurationService.getBoolean("webservices.allowlogin", false)).thenReturn(true);
-		User mockUser = mock(User.class);
-		when(service.userDirectoryService.authenticate("admin", "admin")).thenReturn(mockUser);
-		when(service.userDirectoryService.authenticate("admin", "fail")).thenReturn(null);
 
 		Session mockSession = mock(Session.class);
 		when(mockSession.getId()).thenReturn(SESSION_ID);
 		when(service.sessionManager.startSession()).thenReturn(mockSession);
 
-		IdPwEvidence mockEvidence = mock(IdPwEvidence.class);
-		when(mockEvidence.getIdentifier()).thenReturn("admin");
-		when(mockEvidence.getPassword()).thenReturn("admin");
-		when(mockEvidence.getRemoteAddr()).thenReturn("127.0.0.1");
-
 		Authentication mockAuth = mock(Authentication.class);
 		when(mockAuth.getUid()).thenReturn("admin");
 
+		IdPwEvidence e1 = new IdPwEvidence("admin", "admin", "127.0.0.1");
+		IdPwEvidence e2 = new IdPwEvidence("admin", "fail", "127.0.0.1");
+
 		try {
-			when(service.authenticationManager.authenticate(mockEvidence)).thenReturn(mockAuth);
-		} catch (Exception e) {
+			when(service.authenticationManager.authenticate(eq(e1))).thenReturn(mockAuth);
+			when(service.authenticationManager.authenticate(eq(e2))).thenThrow(new AuthenticationException("invalid password"));
+         	} catch (AuthenticationException ae) {
 		}
 	}
 
 	@Test
-	@Ignore
 	public void testLogin() {
 		WebClient client = WebClient.create(getFullEndpointAddress());
 
@@ -97,7 +92,6 @@ public void testLogin() {
 	}
 
 	@Test
-	@Ignore
 	public void testLoginFailed() {
 		WebClient client = WebClient.create(getFullEndpointAddress());
 
