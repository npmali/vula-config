diff --git a/gradebookng/tool/src/java/org/sakaiproject/gradebookng/business/GbEvent.java b/gradebookng/tool/src/java/org/sakaiproject/gradebookng/business/GbEvent.java
new file mode 100644
index 00000000000..d4ae2ebaa4f
--- /dev/null
+++ b/gradebookng/tool/src/java/org/sakaiproject/gradebookng/business/GbEvent.java
@@ -0,0 +1,26 @@
+package org.sakaiproject.gradebookng.business;
+
+public enum GbEvent {
+    ADD_ASSIGNMENT("gradebook.newItem"),
+    UPDATE_ASSIGNMENT("gradebook.updateAssignment"),
+    DELETE_ASSIGNMENT("gradebook.deleteItem"),
+    UPDATE_GRADE("gradebook.updateItemScore"),
+    UPDATE_UNGRADED("gradebook.updateUngradedScores"),
+    UPDATE_COMMENT("gradebook.comment"),
+    STUDENT_VIEW("gradebook.studentView"),
+    EXPORT("gradebook.export"),
+    IMPORT_BEGIN("gradebook.importBegin"),
+    IMPORT_COMPLETED("gradebook.importCompleted"),
+    OVERRIDE_COURSE_GRADE("gradebook.overrideCourseGrade"),
+    UPDATE_SETTINGS("gradebook.updateSettings");
+
+    private String event;
+
+    GbEvent(final String event) {
+        this.event = event;
+    }
+
+    public String getEvent() {
+        return this.event;
+    }
+}
diff --git a/gradebookng/tool/src/java/org/sakaiproject/gradebookng/business/GradebookNgBusinessService.java b/gradebookng/tool/src/java/org/sakaiproject/gradebookng/business/GradebookNgBusinessService.java
index 05541ddac56..b8db9e513c0 100644
--- a/gradebookng/tool/src/java/org/sakaiproject/gradebookng/business/GradebookNgBusinessService.java
+++ b/gradebookng/tool/src/java/org/sakaiproject/gradebookng/business/GradebookNgBusinessService.java
@@ -63,6 +63,7 @@
 import org.sakaiproject.gradebookng.business.model.GbStudentNameSortOrder;
 import org.sakaiproject.gradebookng.business.model.GbUser;
 import org.sakaiproject.gradebookng.business.util.CourseGradeFormatter;
+import org.sakaiproject.gradebookng.business.util.EventHelper;
 import org.sakaiproject.gradebookng.business.util.FormatHelper;
 import org.sakaiproject.gradebookng.business.util.GbStopWatch;
 import org.sakaiproject.gradebookng.tool.model.GradebookUiSettings;
@@ -778,6 +779,9 @@ public GradeSaveResponse saveGrade(final Long assignmentId, final String student
 			log.error("An error occurred saving the grade. {}: {}", e.getClass(), e.getMessage());
 			rval = GradeSaveResponse.ERROR;
 		}
+
+		EventHelper.postUpdateGradeEvent(gradebook, assignmentId, studentUuid, newGrade, rval, getUserRoleOrNone());
+
 		return rval;
 	}
 
@@ -1697,6 +1701,8 @@ public Long addAssignment(final Assignment assignment) {
 			updateAssignmentCategorizedOrder(gradebook.getUid(), assignment.getCategoryId(), assignmentId,
 					Integer.MAX_VALUE);
 
+			EventHelper.postAddAssignmentEvent(gradebook, assignmentId, assignment, getUserRoleOrNone());
+
 			return assignmentId;
 
 			// TODO wrap this so we can catch any runtime exceptions
@@ -1940,11 +1946,15 @@ public boolean updateAssignment(final Assignment assignment) {
 
 		try {
 			this.gradebookService.updateAssignment(gradebook.getUid(), original.getId(), assignment);
+
+			EventHelper.postUpdateAssignmentEvent(gradebook, assignment, getUserRoleOrNone());
+
 			if (original.getCategoryId() != null && assignment.getCategoryId() != null
 					&& original.getCategoryId().longValue() != assignment.getCategoryId().longValue()) {
 				updateAssignmentCategorizedOrder(gradebook.getUid(), assignment.getCategoryId(), assignment.getId(),
 						Integer.MAX_VALUE);
 			}
+
 			return true;
 		} catch (final Exception e) {
 			log.error("An error occurred updating the assignment", e);
@@ -2009,6 +2019,9 @@ public boolean updateUngradedItems(final long assignmentId, final double grade,
 				this.gradebookService.saveGradeAndCommentForStudent(gradebook.getUid(), assignmentId, studentUuid,
 						FormatHelper.formatGradeForDisplay(String.valueOf(grade)), null);
 			}
+
+			EventHelper.postUpdateUngradedEvent(gradebook, assignmentId, String.valueOf(grade), getUserRoleOrNone());
+
 			return true;
 		} catch (final Exception e) {
 			log.error("An error occurred updating the assignment", e);
@@ -2104,6 +2117,9 @@ public boolean updateAssignmentGradeComment(final long assignmentId, final Strin
 			// could do a check here to ensure we aren't overwriting someone
 			// else's comment that has been updated in the interim...
 			this.gradebookService.setAssignmentScoreComment(gradebook.getUid(), assignmentId, studentUuid, comment);
+
+			EventHelper.postUpdateCommentEvent(getGradebook(), assignmentId, studentUuid, comment, getUserRoleOrNone());
+
 			return true;
 		} catch (GradebookNotFoundException | AssessmentNotFoundException | IllegalArgumentException e) {
 			log.error("An error occurred saving the comment. {}: {}", e.getClass(), e.getMessage());
@@ -2156,6 +2172,19 @@ public GbRole getUserRole(final String siteId) throws GbAccessDeniedException {
 		return rval;
 	}
 
+	/**
+	 * Get the role of the current user in the given site or GbRole.NONE if the user does not have access
+	 *
+	 * @return GbRole for the current user
+	 */
+	public GbRole getUserRoleOrNone() {
+		try {
+			return getUserRole();
+		} catch (GbAccessDeniedException e) {
+			return GbRole.NONE;
+		}
+	}
+
 	/**
 	 * Get a map of grades for the given student. Safe to call when logged in as a student.
 	 *
@@ -2253,6 +2282,8 @@ public void updateGradebookSettings(final GradebookInformation settings) {
 		final Gradebook gradebook = getGradebook(siteId);
 
 		this.gradebookService.updateGradebookSettings(gradebook.getUid(), settings);
+
+		EventHelper.postUpdateSettingsEvent(gradebook);
 	}
 
 	/**
@@ -2262,6 +2293,8 @@ public void updateGradebookSettings(final GradebookInformation settings) {
 	 */
 	public void removeAssignment(final Long assignmentId) {
 		this.gradebookService.removeAssignment(assignmentId);
+
+		EventHelper.postDeleteAssignmentEvent(getGradebook(), assignmentId, getUserRoleOrNone());
 	}
 
 	/**
@@ -2542,6 +2575,7 @@ public boolean updateCourseGrade(final String studentUuid, final String grade) {
 
 		try {
 			this.gradebookService.updateCourseGradeForStudent(gradebook.getUid(), studentUuid, grade);
+			EventHelper.postOverrideCourseGradeEvent(gradebook, studentUuid, grade, grade != null);
 			return true;
 		} catch (final Exception e) {
 			log.error("An error occurred saving the course grade. {}: {}", e.getClass(), e.getMessage());
diff --git a/gradebookng/tool/src/java/org/sakaiproject/gradebookng/business/util/EventHelper.java b/gradebookng/tool/src/java/org/sakaiproject/gradebookng/business/util/EventHelper.java
new file mode 100644
index 00000000000..648a946a33c
--- /dev/null
+++ b/gradebookng/tool/src/java/org/sakaiproject/gradebookng/business/util/EventHelper.java
@@ -0,0 +1,179 @@
+package org.sakaiproject.gradebookng.business.util;
+
+import org.sakaiproject.gradebookng.business.GbEvent;
+import org.sakaiproject.gradebookng.business.GbRole;
+
+import org.sakaiproject.gradebookng.business.GradeSaveResponse;
+import org.sakaiproject.tool.gradebook.Gradebook;
+import org.sakaiproject.service.gradebook.shared.Assignment;
+import org.sakaiproject.event.cover.EventTrackingService;
+import org.sakaiproject.event.api.Event;
+
+public class EventHelper {
+
+    private static String EVENT_REF_PREFIX = "/gradebookng";
+
+    public static void postAddAssignmentEvent(Gradebook gradebook, long assignmentId, Assignment assignment, GbRole currentRole) {
+        String[] bits = new String[] {
+            EVENT_REF_PREFIX,
+            String.valueOf(gradebook.getId()),
+            String.valueOf(assignmentId),
+            assignment.getName(),
+            String.valueOf(assignment.getPoints()),
+            String.valueOf(assignment.getDueDate() == null ? -1 : assignment.getDueDate().getTime()),
+            String.valueOf(assignment.isReleased()),
+            String.valueOf(assignment.isCounted()),
+            assignment.getCategoryId() == null ? "uncategorized" : String.valueOf(assignment.getCategoryId()),
+            currentRole.toString().toLowerCase()
+        };
+
+        postEvent(createEvent(GbEvent.ADD_ASSIGNMENT, String.join("/", bits), true));
+    }
+
+    public static void postUpdateAssignmentEvent(Gradebook gradebook, Assignment assignment, GbRole currentRole) {
+        String[] bits = new String[] {
+            EVENT_REF_PREFIX,
+            String.valueOf(gradebook.getId()),
+            String.valueOf(assignment.getId()),
+            assignment.getName(),
+            String.valueOf(assignment.getPoints()),
+            String.valueOf(assignment.getDueDate() == null ? -1 : assignment.getDueDate().getTime()),
+            String.valueOf(assignment.isReleased()),
+            String.valueOf(assignment.isCounted()),
+            assignment.getCategoryId() == null ? "uncategorized" : String.valueOf(assignment.getCategoryId()),
+            currentRole.toString().toLowerCase()
+        };
+
+        postEvent(createEvent(GbEvent.UPDATE_ASSIGNMENT, String.join("/", bits), true));
+    }
+
+
+    public static void postDeleteAssignmentEvent(Gradebook gradebook, Long assignmentId, GbRole currentRole) {
+        String[] bits = new String[] {
+            EVENT_REF_PREFIX,
+            String.valueOf(gradebook.getId()),
+            String.valueOf(assignmentId),
+            currentRole.toString().toLowerCase()
+        };
+
+        postEvent(createEvent(GbEvent.DELETE_ASSIGNMENT, String.join("/", bits), true));
+    }
+
+
+    public static void postUpdateGradeEvent(Gradebook gradebook, Long assignmentId, String studentUid, String grade, GradeSaveResponse gsr, GbRole currentRole) {
+        String[] bits = new String[] {
+            EVENT_REF_PREFIX,
+            String.valueOf(gradebook.getId()),
+            String.valueOf(assignmentId),
+            studentUid,
+            grade,
+            gsr.toString(),
+            currentRole.toString().toLowerCase()
+        };
+
+        postEvent(createEvent(GbEvent.UPDATE_GRADE, String.join("/", bits), true));
+    }
+
+
+    public static void postUpdateUngradedEvent(Gradebook gradebook, Long assignmentId, String grade, GbRole currentRole) {
+        String[] bits = new String[] {
+            EVENT_REF_PREFIX,
+            String.valueOf(gradebook.getId()),
+            String.valueOf(assignmentId),
+            grade,
+            currentRole.toString().toLowerCase()
+        };
+
+        postEvent(createEvent(GbEvent.UPDATE_UNGRADED, String.join("/", bits), true));
+    }
+
+
+    public static void postUpdateCommentEvent(Gradebook gradebook, Long assignmentId, String studentUid, String comment, GbRole currentRole) {
+        String[] bits = new String[] {
+            EVENT_REF_PREFIX,
+            String.valueOf(gradebook.getId()),
+            String.valueOf(assignmentId),
+            studentUid,
+            String.valueOf(comment.length()),
+            currentRole.toString().toLowerCase()
+        };
+
+        postEvent(createEvent(GbEvent.UPDATE_COMMENT, String.join("/", bits), true));
+    }
+
+
+    public static void postUpdateSettingsEvent(Gradebook gradebook) {
+        String[] bits = new String[] {
+            EVENT_REF_PREFIX,
+            String.valueOf(gradebook.getId()),
+        };
+
+        postEvent(createEvent(GbEvent.UPDATE_SETTINGS, String.join("/", bits), true));
+    }
+
+
+    public static void postStudentViewEvent(Gradebook gradebook, String studentUid) {
+        String[] bits = new String[] {
+            EVENT_REF_PREFIX,
+            String.valueOf(gradebook.getId()),
+            studentUid,
+        };
+
+        postEvent(createEvent(GbEvent.STUDENT_VIEW, String.join("/", bits), false));
+    }
+
+
+    public static void postExportEvent(Gradebook gradebook, boolean isCustomExport) {
+        String[] bits = new String[] {
+            EVENT_REF_PREFIX,
+            String.valueOf(gradebook.getId()),
+            isCustomExport ? "custom" : "full"
+        };
+
+        postEvent(createEvent(GbEvent.EXPORT, String.join("/", bits), false));
+    }
+
+
+    public static void postImportBeginEvent(Gradebook gradebook) {
+        String[] bits = new String[] {
+            EVENT_REF_PREFIX,
+            String.valueOf(gradebook.getId())
+        };
+
+        postEvent(createEvent(GbEvent.IMPORT_BEGIN, String.join("/", bits), false));
+    }
+
+
+    public static void postImportCompletedEvent(Gradebook gradebook, boolean success) {
+        String[] bits = new String[] {
+            EVENT_REF_PREFIX,
+            String.valueOf(gradebook.getId()),
+            success ? "success" : "errors"
+        };
+
+        postEvent(createEvent(GbEvent.IMPORT_COMPLETED, String.join("/", bits), false));
+    }
+
+
+    public static void postOverrideCourseGradeEvent(Gradebook gradebook, String studentUid, String courseGrade, boolean isOverride) {
+        String[] bits = new String[] {
+            EVENT_REF_PREFIX,
+            String.valueOf(gradebook.getId()),
+            studentUid,
+            courseGrade,
+            isOverride ? "override" : "reverted"
+        };
+
+        postEvent(createEvent(GbEvent.OVERRIDE_COURSE_GRADE, String.join("/", bits), true));
+    }
+
+
+    private static Event createEvent(GbEvent type, String ref, boolean causedModify) {
+        return EventTrackingService.newEvent(type.getEvent(), ref, causedModify);
+    }
+
+    private static void postEvent(Event event) {
+        EventTrackingService.post(event);
+    }
+
+}
diff --git a/gradebookng/tool/src/java/org/sakaiproject/gradebookng/tool/pages/StudentPage.java b/gradebookng/tool/src/java/org/sakaiproject/gradebookng/tool/pages/StudentPage.java
index b782a98680e..d6320a35460 100644
--- a/gradebookng/tool/src/java/org/sakaiproject/gradebookng/tool/pages/StudentPage.java
+++ b/gradebookng/tool/src/java/org/sakaiproject/gradebookng/tool/pages/StudentPage.java
@@ -26,6 +26,7 @@
 import org.apache.wicket.model.StringResourceModel;
 import org.sakaiproject.component.cover.ServerConfigurationService;
 import org.sakaiproject.gradebookng.business.GbRole;
+import org.sakaiproject.gradebookng.business.util.EventHelper;
 import org.sakaiproject.gradebookng.tool.panels.StudentGradeSummaryGradesPanel;
 import org.sakaiproject.user.api.User;
 
@@ -54,6 +55,8 @@ public StudentPage() {
 
 		add(new Label("heading", new StringResourceModel("heading.studentpage", null, new Object[] { u.getDisplayName() })));
 		add(new StudentGradeSummaryGradesPanel("summary", Model.ofMap(userData)));
+
+		EventHelper.postStudentViewEvent(this.businessService.getGradebook(), u.getId());
 	}
 
 	@Override
diff --git a/gradebookng/tool/src/java/org/sakaiproject/gradebookng/tool/panels/importExport/ExportPanel.java b/gradebookng/tool/src/java/org/sakaiproject/gradebookng/tool/panels/importExport/ExportPanel.java
index 423e805d173..234aca70eca 100644
--- a/gradebookng/tool/src/java/org/sakaiproject/gradebookng/tool/panels/importExport/ExportPanel.java
+++ b/gradebookng/tool/src/java/org/sakaiproject/gradebookng/tool/panels/importExport/ExportPanel.java
@@ -39,6 +39,7 @@
 import org.sakaiproject.gradebookng.business.model.GbGradeInfo;
 import org.sakaiproject.gradebookng.business.model.GbGroup;
 import org.sakaiproject.gradebookng.business.model.GbStudentGradeInfo;
+import org.sakaiproject.gradebookng.business.util.EventHelper;
 import org.sakaiproject.gradebookng.business.util.FormatHelper;
 import org.sakaiproject.gradebookng.tool.model.GradebookUiSettings;
 import org.sakaiproject.gradebookng.tool.panels.BasePanel;
@@ -398,6 +399,8 @@ private File buildFile(final boolean isCustomExport) {
 			throw new RuntimeException(e);
 		}
 
+		EventHelper.postExportEvent(getGradebook(), isCustomExport);
+
 		return tempFile;
 	}
 
diff --git a/gradebookng/tool/src/java/org/sakaiproject/gradebookng/tool/panels/importExport/GradeImportConfirmationStep.java b/gradebookng/tool/src/java/org/sakaiproject/gradebookng/tool/panels/importExport/GradeImportConfirmationStep.java
index 6f864769dc6..17fa5c1ea3e 100644
--- a/gradebookng/tool/src/java/org/sakaiproject/gradebookng/tool/panels/importExport/GradeImportConfirmationStep.java
+++ b/gradebookng/tool/src/java/org/sakaiproject/gradebookng/tool/panels/importExport/GradeImportConfirmationStep.java
@@ -45,6 +45,7 @@
 import org.sakaiproject.gradebookng.business.model.ProcessedGradeItem.Type;
 import org.sakaiproject.gradebookng.business.model.ProcessedGradeItemDetail;
 import org.sakaiproject.gradebookng.business.util.FormatHelper;
+import org.sakaiproject.gradebookng.business.util.EventHelper;
 import org.sakaiproject.gradebookng.business.util.MessageHelper;
 import org.sakaiproject.gradebookng.tool.model.ImportWizardModel;
 import org.sakaiproject.gradebookng.tool.pages.GradebookPage;
@@ -137,6 +138,8 @@ public void onSubmit(AjaxRequestTarget target, Form<?> form) {
 			@Override
 			public void onSubmit(AjaxRequestTarget target, Form<?> form) {
 
+				EventHelper.postImportBeginEvent(getGradebook());
+
 				final Map<String, Long> assignmentMap = new HashMap<>();
 				final List<ProcessedGradeItem> itemsToSave = new ArrayList<>();
 				Set<ProcessedGradeItem> errorColumns = new HashSet<>();
@@ -265,6 +268,8 @@ public void onSubmit(AjaxRequestTarget target, Form<?> form) {
 					// Present errors to the user
 					page.updateFeedback(target);
 				}
+
+				EventHelper.postImportCompletedEvent(getGradebook(), !GradeImportConfirmationStep.this.errors);
 			}
 		};
 		form.add(finishButton);
