From a4161adf6f2c9fa76a664a5a68f2899999f78abf Mon Sep 17 00:00:00 2001
From: root <stephen.marquard@uct.ac.za>
Date: Wed, 19 Jul 2017 15:14:25 +0200
Subject: [PATCH] SAK-32699 IP whitelisting for internal user authentication

---
 .../src/java/org/sakaiproject/dav/DavServlet.java  |  2 +-
 .../org/sakaiproject/user/api/IdPwEvidence.java    | 11 ++-
 .../sakaiproject/user/impl/UserAuthnComponent.java | 11 ++-
 .../user/impl/test/AuthenticationCacheTest.java    |  4 +-
 kernel/kernel-util/pom.xml                         |  5 ++
 .../main/java/org/sakaiproject/util/BasicAuth.java |  2 +-
 .../java/org/sakaiproject/util/IPAddrUtil.java     | 87 ++++++++++++++++++++++
 .../java/org/sakaiproject/util/IdPwEvidence.java   | 15 +++-
 .../java/org/sakaiproject/util/IPAddrUtilTest.java | 75 +++++++++++++++++++
 .../login/impl/LoginServiceComponent.java          |  2 +-
 .../tool/podcasts/RSSPodfeedServlet.java           |  2 +-
 .../accountvalidator/tool/otp/ClaimLocator.java    |  2 +-
 12 files changed, 208 insertions(+), 10 deletions(-)
 create mode 100644 kernel/kernel-util/src/main/java/org/sakaiproject/util/IPAddrUtil.java
 create mode 100644 kernel/kernel-util/src/test/java/org/sakaiproject/util/IPAddrUtilTest.java

diff --git a/dav/dav/src/java/org/sakaiproject/dav/DavServlet.java b/dav/dav/src/java/org/sakaiproject/dav/DavServlet.java
index 024bf4668f7..3813745bdf3 100644
--- a/dav/dav/src/java/org/sakaiproject/dav/DavServlet.java
+++ b/dav/dav/src/java/org/sakaiproject/dav/DavServlet.java
@@ -1076,7 +1076,7 @@ protected void service(HttpServletRequest req, HttpServletResponse res) throws S
 		{
 			String eid = prin.getName();
 			String pw = ((DavPrincipal) prin).getPassword();
-			Evidence e = new IdPwEvidence(eid, pw);
+			Evidence e = new IdPwEvidence(eid, pw, req.getRemoteAddr());
 
 			// in older versions of this code, we didn't authenticate
 			// if there was a session for this user. Unfortunately the
diff --git a/kernel/api/src/main/java/org/sakaiproject/user/api/IdPwEvidence.java b/kernel/api/src/main/java/org/sakaiproject/user/api/IdPwEvidence.java
index 956df84ce3e..4a32de598d7 100644
--- a/kernel/api/src/main/java/org/sakaiproject/user/api/IdPwEvidence.java
+++ b/kernel/api/src/main/java/org/sakaiproject/user/api/IdPwEvidence.java
@@ -23,7 +23,9 @@
 
 /**
  * <p>
- * IdPwEvidence is Authetication evidence made up of a user identifier and a password. Note the "id" used here is something the user offers for authentication purposes, and is *not* the user's Sakai user object UUID.
+ * IdPwEvidence is Authetication evidence made up of a user identifier, a password and the remote address from where the user's
+ * request originates. Note the "id" used here is something the user offers for authentication purposes, and is *not* the user's
+ * Sakai user object UUID.
  * </p>
  */
 public interface IdPwEvidence extends Evidence
@@ -41,4 +43,11 @@
 	 * @return The password.
 	 */
 	String getPassword();
+
+	/**
+	 * Access the remote address
+	 * 
+	 * @return The remote address
+	 */
+	String getRemoteAddr();
 }
diff --git a/kernel/kernel-impl/src/main/java/org/sakaiproject/user/impl/UserAuthnComponent.java b/kernel/kernel-impl/src/main/java/org/sakaiproject/user/impl/UserAuthnComponent.java
index 038332d95ed..4f1767abbe9 100644
--- a/kernel/kernel-impl/src/main/java/org/sakaiproject/user/impl/UserAuthnComponent.java
+++ b/kernel/kernel-impl/src/main/java/org/sakaiproject/user/impl/UserAuthnComponent.java
@@ -34,6 +34,7 @@
 import org.sakaiproject.user.api.User;
 import org.sakaiproject.user.api.UserDirectoryService;
 import org.sakaiproject.user.api.UserNotDefinedException;
+import org.sakaiproject.util.IPAddrUtil;
 
 /**
  * <p>
@@ -111,10 +112,18 @@ public Authentication authenticate(Evidence e) throws AuthenticationException
 				authenticationCache().putAuthenticationFailure(evidence.getIdentifier(), evidence.getPassword());
 				throw new AuthenticationException("Invalid Login: Either user not found or password incorrect.");
 			}
+
+			// Check to see if the user account is disabled
 			String disabled = user.getProperties().getProperty("disabled");
 			if (disabled != null && "true".equals(disabled))
 			{
-				throw new AuthenticationException("Account Disabled: The users authentication has been disabled");
+				throw new AuthenticationException("Account Disabled: The user's authentication has been disabled");
+			}
+
+			// Check optional whitelist for this account
+			String whitelist = user.getProperties().getProperty("ip-whitelist");
+			if (whitelist != null && !whitelist.isEmpty() && !IPAddrUtil.matchIPList(whitelist, evidence.getRemoteAddr())) {
+				throw new AuthenticationException("Authentication refused: The user may only authenticate from whitelisted addresses");
 			}
 
 			rv = new org.sakaiproject.util.Authentication(user.getId(), user.getEid());
diff --git a/kernel/kernel-impl/src/test/java/org/sakaiproject/user/impl/test/AuthenticationCacheTest.java b/kernel/kernel-impl/src/test/java/org/sakaiproject/user/impl/test/AuthenticationCacheTest.java
index a8d2316af61..08da292dfd8 100644
--- a/kernel/kernel-impl/src/test/java/org/sakaiproject/user/impl/test/AuthenticationCacheTest.java
+++ b/kernel/kernel-impl/src/test/java/org/sakaiproject/user/impl/test/AuthenticationCacheTest.java
@@ -40,7 +40,7 @@
 public class AuthenticationCacheTest extends SakaiKernelTestBase {
 	private static Logger log = LoggerFactory.getLogger(AuthenticationCacheTest.class);
 	private static String[] USER_DATA_1 = {"localonly1user", null, "First", "Last1", "local1@edu", "local1password"};
-	private static IdPwEvidence USER_EVIDENCE_1 = new IdPwEvidence(USER_DATA_1[0], USER_DATA_1[5]);
+	private static IdPwEvidence USER_EVIDENCE_1 = new IdPwEvidence(USER_DATA_1[0], USER_DATA_1[5], null);
 	private static String[] USER_DATA_2 = {"localonly2user", null, "First", "Last2", "local2@edu", "local2password"};
 	private AuthenticationManager authenticationManager;
 	private AuthenticationCache authenticationCache;
@@ -98,7 +98,7 @@ public void testAuthenticationCache() throws Exception {
 		Assert.assertTrue(authentication.getEid().equals(USER_DATA_1[0]));
 
 		// Test authentication failure throttle.
-		IdPwEvidence badEvidence = new IdPwEvidence(USER_DATA_1[0], "Not the password");
+		IdPwEvidence badEvidence = new IdPwEvidence(USER_DATA_1[0], "Not the password", null);
 		try {
 			authenticationManager.authenticate(badEvidence);
 			Assert.fail();
diff --git a/kernel/kernel-util/pom.xml b/kernel/kernel-util/pom.xml
index 3c7539008b4..c7d0725f2ca 100644
--- a/kernel/kernel-util/pom.xml
+++ b/kernel/kernel-util/pom.xml
@@ -74,6 +74,11 @@
       <artifactId>commons-io</artifactId>
     </dependency>
     <dependency>
+      <groupId>commons-net</groupId>
+      <artifactId>commons-net</artifactId>
+      <version>3.6</version>
+    </dependency>
+    <dependency>
         <groupId>org.mockito</groupId>
         <artifactId>mockito-all</artifactId>
         <version>1.8.5</version>
diff --git a/kernel/kernel-util/src/main/java/org/sakaiproject/util/BasicAuth.java b/kernel/kernel-util/src/main/java/org/sakaiproject/util/BasicAuth.java
index 8e6b922e7f3..28c71118ffb 100644
--- a/kernel/kernel-util/src/main/java/org/sakaiproject/util/BasicAuth.java
+++ b/kernel/kernel-util/src/main/java/org/sakaiproject/util/BasicAuth.java
@@ -223,7 +223,7 @@ public boolean doLogin(HttpServletRequest req) throws IOException {
 							String eid = auth.substring(0, colon);
 							String pw = auth.substring(colon + 1);
 							if (eid.length() > 0 && pw.length() > 0) {
-								e = new IdPwEvidence(eid, pw);
+								e = new IdPwEvidence(eid, pw, req.getRemoteAddr());
 							}
 						}
 					}
diff --git a/kernel/kernel-util/src/main/java/org/sakaiproject/util/IPAddrUtil.java b/kernel/kernel-util/src/main/java/org/sakaiproject/util/IPAddrUtil.java
new file mode 100644
index 00000000000..c05e99f9e38
--- /dev/null
+++ b/kernel/kernel-util/src/main/java/org/sakaiproject/util/IPAddrUtil.java
@@ -0,0 +1,87 @@
+/**********************************************************************************
+ * $URL$
+ * $Id$
+ ***********************************************************************************
+ *
+ * Copyright (c) 2017 Apereo Foundation
+ *
+ * Licensed under the Educational Community License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *       http://www.opensource.org/licenses/ECL-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ **********************************************************************************/
+
+package org.sakaiproject.util;
+
+import java.util.Arrays;
+import java.util.List;
+
+import org.apache.commons.lang.StringUtils;
+import org.apache.commons.net.util.SubnetUtils;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * <p>
+ * IPAddrUtil contains utility methods for working with IP addresses.
+ * </p>
+ */
+public class IPAddrUtil
+{
+	private static final Logger log = LoggerFactory.getLogger(IPAddrUtil.class);
+
+	/**
+	 * Match an address against a list of IP CIDR addresses
+	 * 
+	 * @param addrlist
+	 *        The comma-separated list of addresses
+	 * @param addr
+	 *        The IP address to match
+	 * @return true if address is contained in one or more of the CIDR network blocks listed in addrlist, false if not
+	 */
+	public static boolean matchIPList(String addrlist, String addr)
+	{
+		log.info("Matching IP '" + addr + "' to whitelist '" + addrlist + "'");
+
+		// TODO Support IPv6
+
+		if (StringUtils.isBlank(addrlist) || StringUtils.isBlank(addr))
+			return false;
+
+		boolean match = false;
+
+		List<String> subnetMasks = Arrays.asList(addrlist.split(","));
+
+		for (String subnetMask : subnetMasks) {
+			if (!subnetMask.contains("/") && subnetMask.equals(addr)) {
+				// Exact match
+				match = true;
+				break;
+			} else {
+				// Subnet
+				try {
+					SubnetUtils.SubnetInfo subnet = new SubnetUtils(subnetMask).getInfo();
+					log.info("Checking IP " + addr + " to subnet " + subnet.getCidrSignature());
+					if (subnet.isInRange(addr)) {
+						log.info("IP Address " + addr + " is in range " + subnet.getCidrSignature());
+						match = true;
+						break;
+					}
+				} catch (IllegalArgumentException e) {
+					log.warn("IP Address " + addr + " or mask " + subnetMask + " is not a valid IP address format");
+				}
+			}
+		}
+
+		return match;
+	}
+
+}
diff --git a/kernel/kernel-util/src/main/java/org/sakaiproject/util/IdPwEvidence.java b/kernel/kernel-util/src/main/java/org/sakaiproject/util/IdPwEvidence.java
index 1ac4845db5b..175517c43d7 100644
--- a/kernel/kernel-util/src/main/java/org/sakaiproject/util/IdPwEvidence.java
+++ b/kernel/kernel-util/src/main/java/org/sakaiproject/util/IdPwEvidence.java
@@ -34,6 +34,9 @@
 	/** The password string. */
 	protected String m_password = null;
 
+	/** The remote address. */
+        protected String m_remoteAddr = null;
+
 	/**
 	 * Construct, with identifier and password.
 	 * 
@@ -42,10 +45,11 @@
 	 * @param password
 	 *        The password string.
 	 */
-	public IdPwEvidence(String identifier, String password)
+	public IdPwEvidence(String identifier, String password, String remoteAddr)
 	{
 		m_identifier = identifier;
 		m_password = password;
+		m_remoteAddr = remoteAddr;
 	}
 
 	/**
@@ -63,4 +67,13 @@ public String getPassword()
 	{
 		return m_password;
 	}
+
+	/**
+	 * @inheritDoc
+	 */
+	public String getRemoteAddr()
+	{
+		return m_remoteAddr;
+	}
 }
+
diff --git a/kernel/kernel-util/src/test/java/org/sakaiproject/util/IPAddrUtilTest.java b/kernel/kernel-util/src/test/java/org/sakaiproject/util/IPAddrUtilTest.java
new file mode 100644
index 00000000000..529308a7ded
--- /dev/null
+++ b/kernel/kernel-util/src/test/java/org/sakaiproject/util/IPAddrUtilTest.java
@@ -0,0 +1,75 @@
+/**********************************************************************************
+ * $URL:$
+ * $Id:$
+ ***********************************************************************************
+ *
+ * Copyright (c) 2007, 2008 Sakai Foundation
+ *
+ * Licensed under the Educational Community License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *       http://www.opensource.org/licenses/ECL-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ **********************************************************************************/
+
+package org.sakaiproject.util;
+
+import org.junit.Assert;
+import org.junit.Ignore;
+import org.junit.Test;
+import org.sakaiproject.util.IPAddrUtil;
+
+
+/**
+ * Testing the IPAddrUtil
+ */
+public class IPAddrUtilTest {
+
+    /**
+     * Test method for {@link org.sakaiproject.content.util.IPAddrUtil#matchIPList()}.
+     * 
+     */
+    @Test
+    public void testMatchIPList() {
+
+	String privateRanges = "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16,198.51.100.0/24,127.0.0.0/8";
+
+	// null or empty list never matches
+	Assert.assertFalse(IPAddrUtil.matchIPList("", "1.2.3.4"));
+	Assert.assertFalse(IPAddrUtil.matchIPList(null, "1.2.3.4"));
+
+	// Inside the range
+	Assert.assertTrue(IPAddrUtil.matchIPList(privateRanges, "10.0.3.1"));
+	Assert.assertTrue(IPAddrUtil.matchIPList(privateRanges, "172.25.3.250"));
+	Assert.assertTrue(IPAddrUtil.matchIPList(privateRanges, "192.168.4.10"));
+	Assert.assertTrue(IPAddrUtil.matchIPList(privateRanges, "127.0.0.1"));
+
+	// Outside the range
+	Assert.assertFalse(IPAddrUtil.matchIPList(privateRanges, "11.0.3.1"));
+	Assert.assertFalse(IPAddrUtil.matchIPList(privateRanges, "172.32.0.0"));
+	Assert.assertFalse(IPAddrUtil.matchIPList(privateRanges, "192.169.0.1"));
+	Assert.assertFalse(IPAddrUtil.matchIPList(privateRanges, "128.3.2.1"));
+
+	// Invalid address format
+	Assert.assertFalse(IPAddrUtil.matchIPList(privateRanges, "301.3.2.1"));
+	Assert.assertFalse(IPAddrUtil.matchIPList(privateRanges, "10.0.3"));
+	Assert.assertFalse(IPAddrUtil.matchIPList(privateRanges, "address"));
+
+        // Invalid format inside the list
+	Assert.assertTrue(IPAddrUtil.matchIPList("10.0.0.0/8,address,127.0.0.0/8", "10.0.0.1"));
+	Assert.assertFalse(IPAddrUtil.matchIPList("10.0.0.0:8,address,127.0.0.0/8", "10.0.0.1"));
+
+        // Single address
+	Assert.assertTrue(IPAddrUtil.matchIPList("10.0.0.33,address,127.0.0.0/8", "10.0.0.33"));
+	Assert.assertFalse(IPAddrUtil.matchIPList("10.0.0.33,address,127.0.0.0/8", "10.0.0.32"));
+
+    }
+
+}
diff --git a/login/login-impl/impl/src/java/org/sakaiproject/login/impl/LoginServiceComponent.java b/login/login-impl/impl/src/java/org/sakaiproject/login/impl/LoginServiceComponent.java
index 3c7f91b67ec..e322b836431 100644
--- a/login/login-impl/impl/src/java/org/sakaiproject/login/impl/LoginServiceComponent.java
+++ b/login/login-impl/impl/src/java/org/sakaiproject/login/impl/LoginServiceComponent.java
@@ -85,7 +85,7 @@ public void authenticate(LoginCredentials credentials) throws LoginException {
 			// Do NOT trim the password, since many authentication systems allow whitespace.
 			eid = eid.trim();
 
-			Evidence e = new IdPwEvidence(eid, pw);
+			Evidence e = new IdPwEvidence(eid, pw, credentials.getRemoteAddr());
 
 			Authentication a = authenticationManager().authenticate(e);
 
diff --git a/podcasts/podcasts/src/java/org/sakaiproject/tool/podcasts/RSSPodfeedServlet.java b/podcasts/podcasts/src/java/org/sakaiproject/tool/podcasts/RSSPodfeedServlet.java
index 27e40fae143..4922f51d691 100644
--- a/podcasts/podcasts/src/java/org/sakaiproject/tool/podcasts/RSSPodfeedServlet.java
+++ b/podcasts/podcasts/src/java/org/sakaiproject/tool/podcasts/RSSPodfeedServlet.java
@@ -272,7 +272,7 @@ private IdPwEvidence getBasicAuthEvidence(final HttpServletRequest request) {
 					return null;
 				}
 
-				return new IdPwEvidence(eid, password);
+				return new IdPwEvidence(eid, password, request.getRemoteAddr());
 
 			}
 
diff --git a/reset-pass/account-validator-tool/src/java/org/sakaiproject/accountvalidator/tool/otp/ClaimLocator.java b/reset-pass/account-validator-tool/src/java/org/sakaiproject/accountvalidator/tool/otp/ClaimLocator.java
index 4b52dfca53a..da1ea39edb4 100644
--- a/reset-pass/account-validator-tool/src/java/org/sakaiproject/accountvalidator/tool/otp/ClaimLocator.java
+++ b/reset-pass/account-validator-tool/src/java/org/sakaiproject/accountvalidator/tool/otp/ClaimLocator.java
@@ -186,7 +186,7 @@ public String claimAccount() {
 
 	private void authenticateUser(ValidationClaim vc, String oldUserRef) {
 		//log the user in
-		Evidence e = new IdPwEvidence(vc.getUserEid(), vc.getPassword1());
+		Evidence e = new IdPwEvidence(vc.getUserEid(), vc.getPassword1(), httpServletRequest.getRemoteAddr());
 		try {
 			Authentication a = authenticationManager.authenticate(e);
 			log.debug("authenticated " + a.getEid() + "(" + a.getUid() + ")");
